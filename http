                           HTTP- Hyper Text Transfer Protocol
HTTP1
- The flow control mechanism in HTTP1 relies on the basics TCP connection, uses a TCP connection,
each connection demands an individual flow control mechanism.
- HTTP1 has a different technique called resource inlining, wherein the server includes the 
required source within the HTML page in response to the initial GET request.
- Though this technique reduces the number of requests that the client must send,
the larger, non-text format files increase the size of the page.
- HTTP1 addresses this problem by creating a persistent connection between server and client.
- Until explicitly closed, this connection will remain open. So, the client can use one TCP connection 
throughout the communication sans interrupting it again and again.
- This approach surely ensures good performance, but it also is problematic.
- For example – If a request at the queue head cannot retrieve its required resources, it can block all requests behind it.
- This phenomenon is called head-of-line blocking (HOL blocking).
- From the above, we can conclude that multiple TCP connections are essential.
HTTP2 
- It supports full multiplexing for requests as well as response over a single TCP connection
- HTTP2 supports full multiplexing for requests as well as responses over a single TCP connection.
- Due to these capabilities, lower page load times are achieved by removing needless latency and
improving the overall capacity of network alongside its availability.
- As HTTP2 supports multiple simultaneous responses to the client’s initial GET request, 
the server provides the required resource along with the requested HTML page.
-  This is called the server push process, which performs the resource inlining like its precursor while keeping the page
and the pushed resource separate. 
- This process fixes the main drawback of resource inlining by enabling theclient machine to decide to cache/decline
the pushed resource separate from the HTML page.
- When sending streams in parallel, the client can assign weights (1-256) to its stream to prioritize the responses it demands. 
- Here, the higher the weight, the higher the priority. 
- The serve sets the data retrieval order as per the request’s weight.
- Programmers can enjoy better control on page rendering process with stream prioritization ability.
